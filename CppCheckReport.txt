src/engine/iterator/SkipListIterator.h:12:60: style:inconclusive: Member variable 'SkipListIterator::currentNode' is in the wrong place in the initializer list. Members are initialized in the order they are declared, not in the order they are in the initializer list.  Keeping the initializer list in the same order that the members were declared prevents order dependent initialization errors. [initializerList]
            pmem::storage::internal::SkipListInternalNode *currentNode;
                                                           ^
src/engine/iterator/SkipListIterator.cpp:9:15: note: Member variable 'SkipListIterator::currentNode' is in the wrong place in the initializer list.
              currentNode{startingNode} {
              ^
src/engine/iterator/SkipListIterator.h:12:60: note: Member variable 'SkipListIterator::currentNode' is in the wrong place in the initializer list.
            pmem::storage::internal::SkipListInternalNode *currentNode;
                                                           ^
src/engine/iterator/SkipListIterator.h:21:18: style:inconclusive: The member function 'pmem::storage::SkipListIterator::isValid' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
            bool isValid();
                 ^
src/engine/iterator/SkipListIterator.cpp:12:32: note: Technically the member function 'pmem::storage::SkipListIterator::isValid' can be const.
        bool SkipListIterator::isValid() {
                               ^
src/engine/iterator/SkipListIterator.h:21:18: note: Technically the member function 'pmem::storage::SkipListIterator::isValid' can be const.
            bool isValid();
                 ^
src/engine/storage/SkipListLeafNode.cpp:156:69: style:inconclusive: Function 'deleteBy' argument 3 names different: declaration 'pool' definition 'persistentMemoryPool'. [funcArgNamesDifferent]
                                              PersistentMemoryPool* persistentMemoryPool,
                                                                    ^
src/engine/storage/SkipListLeafNode.h:57:55: note: Function 'deleteBy' argument 3 names different: declaration 'pool' definition 'persistentMemoryPool'.
                                PersistentMemoryPool *pool,
                                                      ^
src/engine/storage/SkipListLeafNode.cpp:156:69: note: Function 'deleteBy' argument 3 names different: declaration 'pool' definition 'persistentMemoryPool'.
                                              PersistentMemoryPool* persistentMemoryPool,
                                                                    ^
test/engine/benchmark/DbBenchmark.cpp:75:0: style: The function 'DBGet' is never used. [unusedFunction]

^
test/engine/benchmark/DbBenchmark.cpp:116:0: style: The function 'DBGetArguments' is never used. [unusedFunction]

^
test/engine/benchmark/DbBenchmark.cpp:128:0: style: The function 'DBScan' is never used. [unusedFunction]

^
test/engine/benchmark/DbBenchmark.cpp:178:0: style: The function 'DBScanArguments' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project's include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config. [missingInclude]

