build/CMakeFiles/3.23.0/CompilerIdC/CMakeCCompilerId.c:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/CMakeFiles/3.23.0/CompilerIdC/CMakeCCompilerId.c:712:0: information: Skipping configuration 'SDCC;__SDCC_VERSION_MAJOR' since the value of '__SDCC_VERSION_MAJOR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  COMPILER_VERSION_MAJOR,
^
build/CMakeFiles/3.23.0/CompilerIdC/CMakeCCompilerId.c:712:0: information: Skipping configuration 'SDCC;__SDCC_VERSION_MAJOR;__SDCC_VERSION_MAJOR' since the value of '__SDCC_VERSION_MAJOR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  COMPILER_VERSION_MAJOR,
^
build/CMakeFiles/3.23.0/CompilerIdCXX/CMakeCXXCompilerId.cpp:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/CMakeFiles/3.23.0/CompilerIdCXX/CMakeCXXCompilerId.cpp:697:0: information: Skipping configuration '_MSC_BUILD;_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  COMPILER_VERSION_MAJOR,
^
build/CMakeFiles/3.23.0/CompilerIdCXX/CMakeCXXCompilerId.cpp:699:0: information: Skipping configuration '_MSC_BUILD;_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  '.', COMPILER_VERSION_MINOR,
^
build/CMakeFiles/3.23.0/CompilerIdCXX/CMakeCXXCompilerId.cpp:701:0: information: Skipping configuration '_MSC_FULL_VER;_MSC_VER' since the value of '_MSC_FULL_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   '.', COMPILER_VERSION_PATCH,
^
build/CMakeFiles/3.23.0/CompilerIdCXX/CMakeCXXCompilerId.cpp:697:0: information: Skipping configuration '_MSC_FULL_VER;_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  COMPILER_VERSION_MAJOR,
^
build/CMakeFiles/3.23.0/CompilerIdCXX/CMakeCXXCompilerId.cpp:699:0: information: Skipping configuration '_MSC_FULL_VER;_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  '.', COMPILER_VERSION_MINOR,
^
build/_deps/googlebenchmark-src/bindings/python/google_benchmark/benchmark.cc:46:1: error: syntax error [syntaxError]
PYBIND11_MODULE(_benchmark, m) {
^
build/_deps/googlebenchmark-src/cmake/thread_safety_attributes.cpp:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/log.h:24:3: style: Class 'LogType' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided. [noExplicitConstructor]
  LogType(std::ostream* out) : out_(out) {}
  ^
build/_deps/googlebenchmark-src/src/mutex.h:91:3: style: Class 'MutexLock' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided. [noExplicitConstructor]
  MutexLock(Mutex& m) ACQUIRE(m) : ml_(m.native_handle()) {}
  ^
build/_deps/googlebenchmark-src/src/mutex.h:101:3: style: Class 'Barrier' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided. [noExplicitConstructor]
  Barrier(int num_threads) : running_threads_(num_threads) {}
  ^
build/_deps/googlebenchmark-src/src/benchmark.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/perf_counters.h:127:3: style: Class 'PerfCountersMeasurement' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided. [noExplicitConstructor]
  PerfCountersMeasurement(PerfCounters&& c)
  ^
build/_deps/googlebenchmark-src/src/benchmark_api_internal.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/benchmark_api_internal.cc:10:64: style:inconclusive: Function 'BenchmarkInstance' argument 2 names different: declaration 'family_index' definition 'family_idx'. [funcArgNamesDifferent]
BenchmarkInstance::BenchmarkInstance(Benchmark* benchmark, int family_idx,
                                                               ^
build/_deps/googlebenchmark-src/src/benchmark_api_internal.h:20:47: note: Function 'BenchmarkInstance' argument 2 names different: declaration 'family_index' definition 'family_idx'.
  BenchmarkInstance(Benchmark* benchmark, int family_index,
                                              ^
build/_deps/googlebenchmark-src/src/benchmark_api_internal.cc:10:64: note: Function 'BenchmarkInstance' argument 2 names different: declaration 'family_index' definition 'family_idx'.
BenchmarkInstance::BenchmarkInstance(Benchmark* benchmark, int family_idx,
                                                               ^
build/_deps/googlebenchmark-src/src/benchmark_api_internal.cc:11:42: style:inconclusive: Function 'BenchmarkInstance' argument 3 names different: declaration 'per_family_instance_index' definition 'per_family_instance_idx'. [funcArgNamesDifferent]
                                     int per_family_instance_idx,
                                         ^
build/_deps/googlebenchmark-src/src/benchmark_api_internal.h:21:25: note: Function 'BenchmarkInstance' argument 3 names different: declaration 'per_family_instance_index' definition 'per_family_instance_idx'.
                    int per_family_instance_index,
                        ^
build/_deps/googlebenchmark-src/src/benchmark_api_internal.cc:11:42: note: Function 'BenchmarkInstance' argument 3 names different: declaration 'per_family_instance_index' definition 'per_family_instance_idx'.
                                     int per_family_instance_idx,
                                         ^
build/_deps/googlebenchmark-src/src/benchmark_api_internal.cc:13:42: style:inconclusive: Function 'BenchmarkInstance' argument 5 names different: declaration 'threads' definition 'thread_count'. [funcArgNamesDifferent]
                                     int thread_count)
                                         ^
build/_deps/googlebenchmark-src/src/benchmark_api_internal.h:22:59: note: Function 'BenchmarkInstance' argument 5 names different: declaration 'threads' definition 'thread_count'.
                    const std::vector<int64_t>& args, int threads);
                                                          ^
build/_deps/googlebenchmark-src/src/benchmark_api_internal.cc:13:42: note: Function 'BenchmarkInstance' argument 5 names different: declaration 'threads' definition 'thread_count'.
                                     int thread_count)
                                         ^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:187:3: error: Returning/dereferencing 'bench' after it is deallocated / released [deallocret]
  return bench;
  ^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:184:40: note: Returning/dereferencing 'bench' after it is deallocated / released
  std::unique_ptr<Benchmark> bench_ptr(bench);
                                       ^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:187:3: note: Returning/dereferencing 'bench' after it is deallocated / released
  return bench;
  ^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:112:17: style:inconclusive: Function 'FindBenchmarks' argument 1 names different: declaration 're' definition 'spec'. [funcArgNamesDifferent]
    std::string spec, std::vector<BenchmarkInstance>* benchmarks,
                ^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:82:35: note: Function 'FindBenchmarks' argument 1 names different: declaration 're' definition 'spec'.
  bool FindBenchmarks(std::string re,
                                  ^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:112:17: note: Function 'FindBenchmarks' argument 1 names different: declaration 're' definition 'spec'.
    std::string spec, std::vector<BenchmarkInstance>* benchmarks,
                ^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:113:19: style:inconclusive: Function 'FindBenchmarks' argument 3 names different: declaration 'Err' definition 'ErrStream'. [funcArgNamesDifferent]
    std::ostream* ErrStream) {
                  ^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:84:37: note: Function 'FindBenchmarks' argument 3 names different: declaration 'Err' definition 'ErrStream'.
                      std::ostream* Err);
                                    ^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:113:19: note: Function 'FindBenchmarks' argument 3 names different: declaration 'Err' definition 'ErrStream'.
    std::ostream* ErrStream) {
                  ^
build/_deps/googlebenchmark-src/src/benchmark_runner.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/benchmark_runner.cc:105:11: style: Condition 'memory_iterations' is always true [knownConditionTrueFalse]
          memory_iterations ? static_cast<double>(memory_result->num_allocs) /
          ^
build/_deps/googlebenchmark-src/src/benchmark_runner.cc:101:27: note: Assuming that condition 'memory_iterations>0' is not redundant
    if (memory_iterations > 0) {
                          ^
build/_deps/googlebenchmark-src/src/benchmark_runner.cc:105:11: note: Condition 'memory_iterations' is always true
          memory_iterations ? static_cast<double>(memory_result->num_allocs) /
          ^
build/_deps/googlebenchmark-src/src/benchmark_runner.cc:146:45: style:inconclusive: Function 'BenchmarkRunner' argument 2 names different: declaration 'reports_for_family' definition 'reports_for_family_'. [funcArgNamesDifferent]
    BenchmarkReporter::PerFamilyRunReports* reports_for_family_)
                                            ^
build/_deps/googlebenchmark-src/src/benchmark_runner.h:49:59: note: Function 'BenchmarkRunner' argument 2 names different: declaration 'reports_for_family' definition 'reports_for_family_'.
                  BenchmarkReporter::PerFamilyRunReports* reports_for_family);
                                                          ^
build/_deps/googlebenchmark-src/src/benchmark_runner.cc:146:45: note: Function 'BenchmarkRunner' argument 2 names different: declaration 'reports_for_family' definition 'reports_for_family_'.
    BenchmarkReporter::PerFamilyRunReports* reports_for_family_)
                                            ^
build/_deps/googlebenchmark-src/src/colorprint.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/colorprint.cc:107:9: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    ret = vsnprintf(buff.get(), size, msg, args);
        ^
build/_deps/googlebenchmark-src/src/commandlineflags.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/complexity.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/console_reporter.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/console_reporter.cc:62:13: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
        str += FormatString(" %10s", c.first.c_str());
            ^
build/_deps/googlebenchmark-src/src/counter.cc:42:64: style:inconclusive: Function 'Finish' argument 3 names different: declaration 'time' definition 'cpu_time'. [funcArgNamesDifferent]
void Finish(UserCounters* l, IterationCount iterations, double cpu_time,
                                                               ^
build/_deps/googlebenchmark-src/src/counter.h:24:64: note: Function 'Finish' argument 3 names different: declaration 'time' definition 'cpu_time'.
void Finish(UserCounters* l, IterationCount iterations, double time,
                                                               ^
build/_deps/googlebenchmark-src/src/counter.cc:42:64: note: Function 'Finish' argument 3 names different: declaration 'time' definition 'cpu_time'.
void Finish(UserCounters* l, IterationCount iterations, double cpu_time,
                                                               ^
build/_deps/googlebenchmark-src/src/csv_reporter.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/json_reporter.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/perf_counters.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/reporter.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/sleep.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/statistics.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/string_util.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/sysinfo.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/sysinfo.cc:137:20: style:inconclusive: The member function 'benchmark::::ValueUnion::GetAsArray' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  std::array<T, N> GetAsArray() {
                   ^
build/_deps/googlebenchmark-src/src/sysinfo.cc:529:3: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
  BENCHMARK_UNREACHABLE();
  ^
build/_deps/googlebenchmark-src/src/timers.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/src/timers.cc:132:0: information: Skipping configuration 'CLOCK_PROCESS_CPUTIME_ID;CLOCK_THREAD_CPUTIME_ID' since the value of 'CLOCK_PROCESS_CPUTIME_ID' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &spec) == 0)
^
build/_deps/googlebenchmark-src/src/timers.cc:177:0: information: Skipping configuration 'CLOCK_PROCESS_CPUTIME_ID;CLOCK_THREAD_CPUTIME_ID' since the value of 'CLOCK_THREAD_CPUTIME_ID' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (clock_gettime(CLOCK_THREAD_CPUTIME_ID, &ts) == 0) return MakeTime(ts);
^
build/_deps/googlebenchmark-src/src/timers.cc:177:0: information: Skipping configuration 'CLOCK_THREAD_CPUTIME_ID' since the value of 'CLOCK_THREAD_CPUTIME_ID' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (clock_gettime(CLOCK_THREAD_CPUTIME_ID, &ts) == 0) return MakeTime(ts);
^
build/_deps/googlebenchmark-src/test/args_product_test.cc:62:1: error: There is an unknown macro here somewhere. Configuration is required. If BENCHMARK_DEFINE_F is a macro then please configure it. [unknownMacro]
BENCHMARK_DEFINE_F(ArgsProductFixture, Empty)(benchmark::State& state) {
^
build/_deps/googlebenchmark-src/test/basic_test.cc:92:44: style: Parameter 'state' can be declared with const. However it seems that 'BM_empty_stop_start' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_empty_stop_start(benchmark::State& state) {
                                           ^
build/_deps/googlebenchmark-src/test/basic_test.cc:97:11: note: You might need to cast the function pointer here
BENCHMARK(BM_empty_stop_start)->ThreadPerCpu();
          ^
build/_deps/googlebenchmark-src/test/basic_test.cc:92:44: note: Parameter 'state' can be declared with const
void BM_empty_stop_start(benchmark::State& state) {
                                           ^
build/_deps/googlebenchmark-src/test/basic_test.cc:135:37: style: Parameter 'state' can be declared with const. However it seems that 'BM_RangedFor' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_RangedFor(benchmark::State& state) {
                                    ^
build/_deps/googlebenchmark-src/test/basic_test.cc:142:11: note: You might need to cast the function pointer here
BENCHMARK(BM_RangedFor);
          ^
build/_deps/googlebenchmark-src/test/basic_test.cc:135:37: note: Parameter 'state' can be declared with const
void BM_RangedFor(benchmark::State& state) {
                                    ^
build/_deps/googlebenchmark-src/test/basic_test.cc:138:7: style: Consider using std::distance algorithm instead of a raw loop. [useStlAlgorithm]
    ++iter_count;
      ^
build/_deps/googlebenchmark-src/test/basic_test.cc:150:9: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
    sum += arg;
        ^
build/_deps/googlebenchmark-src/test/basic_test.cc:148:9: style: Variable 'sum' is assigned a value that is never used. [unreadVariable]
  T sum = 0;
        ^
build/_deps/googlebenchmark-src/test/basic_test.cc:150:9: style: Variable 'sum' is assigned a value that is never used. [unreadVariable]
    sum += arg;
        ^
build/_deps/googlebenchmark-src/test/basic_test.cc:159:9: style: Variable 'sum' is assigned a value that is never used. [unreadVariable]
  A sum = 0;
        ^
build/_deps/googlebenchmark-src/test/basic_test.cc:160:10: style: Variable 'prod' is assigned a value that is never used. [unreadVariable]
  B prod = 1;
         ^
build/_deps/googlebenchmark-src/test/basic_test.cc:162:9: style: Variable 'sum' is assigned a value that is never used. [unreadVariable]
    sum += arg;
        ^
build/_deps/googlebenchmark-src/test/basic_test.cc:163:10: style: Variable 'prod' is assigned a value that is never used. [unreadVariable]
    prod *= arg;
         ^
build/_deps/googlebenchmark-src/test/benchmark_gtest.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/benchmark_gtest.cc:21:1: error: syntax error [syntaxError]
TEST(AddRangeTest, Simple64) {
^
build/_deps/googlebenchmark-src/test/benchmark_name_gtest.cc:9:1: error: syntax error [syntaxError]
TEST(BenchmarkNameTest, Empty) {
^
build/_deps/googlebenchmark-src/test/benchmark_random_interleaving_gtest.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/benchmark_random_interleaving_gtest.cc:79:1: error: syntax error [syntaxError]
TEST_F(BenchmarkTest, Match1) {
^
build/_deps/googlebenchmark-src/test/benchmark_setup_teardown_test.cc:90:1: error: There is an unknown macro here somewhere. Configuration is required. If BENCHMARK_F is a macro then please configure it. [unknownMacro]
BENCHMARK_F(FIXTURE_BECHMARK_NAME, BM_WithFixture)(benchmark::State& st) {
^
build/_deps/googlebenchmark-src/test/benchmark_test.cc:172:51: style: Argument 'test_vector->at(i)=1' to function DoNotOptimize is always 1. It does not matter what value 'i' has. [knownArgument]
      benchmark::DoNotOptimize(test_vector->at(i) = 1);
                                                  ^
build/_deps/googlebenchmark-src/test/benchmark_test.cc:56:31: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
  for (auto _ : state) fac_42 = Factorial(8);
                              ^
build/_deps/googlebenchmark-src/test/benchmark_test.cc:67:27: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
  for (auto _ : state) pi = CalculatePi(static_cast<int>(state.range(0)));
                          ^
build/_deps/googlebenchmark-src/test/clobber_memory_assembly_test.cc:41:5: style: Variable 'x' is reassigned a value before the old one has been used. [redundantAssignment]
  x = ExternInt2;
    ^
build/_deps/googlebenchmark-src/test/clobber_memory_assembly_test.cc:39:5: note: x is assigned
  x = ExternInt;
    ^
build/_deps/googlebenchmark-src/test/clobber_memory_assembly_test.cc:41:5: note: x is overwritten
  x = ExternInt2;
    ^
build/_deps/googlebenchmark-src/test/clobber_memory_assembly_test.cc:55:5: style: Variable 'x' is reassigned a value before the old one has been used. [redundantAssignment]
  x = ExternInt2;
    ^
build/_deps/googlebenchmark-src/test/clobber_memory_assembly_test.cc:53:5: note: x is assigned
  x = ExternInt;
    ^
build/_deps/googlebenchmark-src/test/clobber_memory_assembly_test.cc:55:5: note: x is overwritten
  x = ExternInt2;
    ^
build/_deps/googlebenchmark-src/test/commandlineflags_gtest.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/commandlineflags_gtest.cc:32:1: error: syntax error [syntaxError]
TEST(BoolFromEnv, False) {
^
build/_deps/googlebenchmark-src/test/commandlineflags_gtest.cc:27:1: error: syntax error [syntaxError]
TEST(BoolFromEnv, Default) {
^
build/_deps/googlebenchmark-src/test/complexity_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/output_test.h:32:3: style: Struct 'TestCase' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided. [noExplicitConstructor]
  TestCase(std::string re, int rule = MR_Default);
  ^
build/_deps/googlebenchmark-src/test/output_test.h:98:3: style: Struct 'Results' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided. [noExplicitConstructor]
  Results(const std::string& n) : name(n) {}
  ^
build/_deps/googlebenchmark-src/test/diagnostics_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/display_aggregates_only_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/display_aggregates_only_test.cc:13:41: style: Parameter 'state' can be declared with const. However it seems that 'BM_SummaryRepeat' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_SummaryRepeat(benchmark::State& state) {
                                        ^
build/_deps/googlebenchmark-src/test/display_aggregates_only_test.cc:17:11: note: You might need to cast the function pointer here
BENCHMARK(BM_SummaryRepeat)->Repetitions(3)->DisplayAggregatesOnly();
          ^
build/_deps/googlebenchmark-src/test/display_aggregates_only_test.cc:13:41: note: Parameter 'state' can be declared with const
void BM_SummaryRepeat(benchmark::State& state) {
                                        ^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:23:7: style: struct member 'Large::value' is never used. [unusedStructMember]
  int value;
      ^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:24:7: style: struct member 'Large::data' is never used. [unusedStructMember]
  int data[2];
      ^
build/_deps/googlebenchmark-src/test/filter_test.cc:43:40: style: Parameter 'state' can be declared with const. However it seems that 'NoPrefix' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void NoPrefix(benchmark::State& state) {
                                       ^
build/_deps/googlebenchmark-src/test/filter_test.cc:47:11: note: You might need to cast the function pointer here
BENCHMARK(NoPrefix);
          ^
build/_deps/googlebenchmark-src/test/filter_test.cc:43:40: note: Parameter 'state' can be declared with const
static void NoPrefix(benchmark::State& state) {
                                       ^
build/_deps/googlebenchmark-src/test/filter_test.cc:49:38: style: Parameter 'state' can be declared with const. However it seems that 'BM_Foo' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_Foo(benchmark::State& state) {
                                     ^
build/_deps/googlebenchmark-src/test/filter_test.cc:53:11: note: You might need to cast the function pointer here
BENCHMARK(BM_Foo);
          ^
build/_deps/googlebenchmark-src/test/filter_test.cc:49:38: note: Parameter 'state' can be declared with const
static void BM_Foo(benchmark::State& state) {
                                     ^
build/_deps/googlebenchmark-src/test/filter_test.cc:55:38: style: Parameter 'state' can be declared with const. However it seems that 'BM_Bar' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_Bar(benchmark::State& state) {
                                     ^
build/_deps/googlebenchmark-src/test/filter_test.cc:59:11: note: You might need to cast the function pointer here
BENCHMARK(BM_Bar);
          ^
build/_deps/googlebenchmark-src/test/filter_test.cc:55:38: note: Parameter 'state' can be declared with const
static void BM_Bar(benchmark::State& state) {
                                     ^
build/_deps/googlebenchmark-src/test/filter_test.cc:61:41: style: Parameter 'state' can be declared with const. However it seems that 'BM_FooBar' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_FooBar(benchmark::State& state) {
                                        ^
build/_deps/googlebenchmark-src/test/filter_test.cc:65:11: note: You might need to cast the function pointer here
BENCHMARK(BM_FooBar);
          ^
build/_deps/googlebenchmark-src/test/filter_test.cc:61:41: note: Parameter 'state' can be declared with const
static void BM_FooBar(benchmark::State& state) {
                                        ^
build/_deps/googlebenchmark-src/test/filter_test.cc:67:40: style: Parameter 'state' can be declared with const. However it seems that 'BM_FooBa' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_FooBa(benchmark::State& state) {
                                       ^
build/_deps/googlebenchmark-src/test/filter_test.cc:71:11: note: You might need to cast the function pointer here
BENCHMARK(BM_FooBa);
          ^
build/_deps/googlebenchmark-src/test/filter_test.cc:67:40: note: Parameter 'state' can be declared with const
static void BM_FooBa(benchmark::State& state) {
                                       ^
build/_deps/googlebenchmark-src/test/fixture_test.cc:30:1: error: There is an unknown macro here somewhere. Configuration is required. If BENCHMARK_F is a macro then please configure it. [unknownMacro]
BENCHMARK_F(FIXTURE_BECHMARK_NAME, Foo)(benchmark::State& st) {
^
build/_deps/googlebenchmark-src/test/internal_threading_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/map_test.cc:46:1: error: There is an unknown macro here somewhere. Configuration is required. If BENCHMARK_DEFINE_F is a macro then please configure it. [unknownMacro]
BENCHMARK_DEFINE_F(MapFixture, Lookup)(benchmark::State& state) {
^
build/_deps/googlebenchmark-src/test/memory_manager_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/multiple_ranges_test.cc:67:1: error: There is an unknown macro here somewhere. Configuration is required. If BENCHMARK_DEFINE_F is a macro then please configure it. [unknownMacro]
BENCHMARK_DEFINE_F(MultipleRangesFixture, Empty)(benchmark::State& state) {
^
build/_deps/googlebenchmark-src/test/options_test.cc:11:33: style: Parameter 'state' can be declared with const. However it seems that 'BM_basic' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_basic(benchmark::State& state) {
                                ^
build/_deps/googlebenchmark-src/test/options_test.cc:57:11: note: You might need to cast the function pointer here
BENCHMARK(BM_basic)->Apply(CustomArgs);
          ^
build/_deps/googlebenchmark-src/test/options_test.cc:11:33: note: Parameter 'state' can be declared with const
void BM_basic(benchmark::State& state) {
                                ^
build/_deps/googlebenchmark-src/test/options_test.cc:69:26: style: Consider using std::distance algorithm instead of a raw loop. [useStlAlgorithm]
  for (auto _ : state) ++actual_iterations;
                         ^
build/_deps/googlebenchmark-src/test/output_test_helper.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/output_test_helper.cc:143:3: style: Class 'TestReporter' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided. [noExplicitConstructor]
  TestReporter(std::vector<benchmark::BenchmarkReporter*> reps)
  ^
build/_deps/googlebenchmark-src/test/output_test_helper.cc:303:31: style:inconclusive: Function 'AddChecker' argument 1 names different: declaration 'bm_name_pattern' definition 'bm_name'. [funcArgNamesDifferent]
size_t AddChecker(const char* bm_name, const ResultsCheckFn& fn) {
                              ^
build/_deps/googlebenchmark-src/test/output_test.h:88:31: note: Function 'AddChecker' argument 1 names different: declaration 'bm_name_pattern' definition 'bm_name'.
size_t AddChecker(const char* bm_name_pattern, const ResultsCheckFn& fn);
                              ^
build/_deps/googlebenchmark-src/test/output_test_helper.cc:303:31: note: Function 'AddChecker' argument 1 names different: declaration 'bm_name_pattern' definition 'bm_name'.
size_t AddChecker(const char* bm_name, const ResultsCheckFn& fn) {
                              ^
build/_deps/googlebenchmark-src/test/output_test_helper.cc:373:34: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
      if (EKV.first == KV.first) {
                                 ^
build/_deps/googlebenchmark-src/test/output_test_helper.cc:471:23: style: Consider using std::replace_if algorithm instead of a raw loop. [useStlAlgorithm]
    if (ch == '%') ch = RandomHexChar();
                      ^
build/_deps/googlebenchmark-src/test/perf_counters_gtest.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/perf_counters_gtest.cc:21:1: error: syntax error [syntaxError]
TEST(PerfCountersTest, Init) {
^
build/_deps/googlebenchmark-src/test/perf_counters_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/register_benchmark_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/register_benchmark_test.cc:103:8: style:inconclusive: The member function 'CustomFixture::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  void operator()(benchmark::State& st) {
       ^
build/_deps/googlebenchmark-src/test/register_benchmark_test.cc:25:3: style: Struct 'TestCase' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided. [noExplicitConstructor]
  TestCase(const char* xname) : TestCase(xname, nullptr) {}
  ^
build/_deps/googlebenchmark-src/test/register_benchmark_test.cc:65:36: style: Parameter 'state' can be declared with const. However it seems that 'BM_function' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_function(benchmark::State& state) {
                                   ^
build/_deps/googlebenchmark-src/test/register_benchmark_test.cc:71:40: note: You might need to cast the function pointer here
    "BM_function_manual_registration", BM_function);
                                       ^
build/_deps/googlebenchmark-src/test/register_benchmark_test.cc:65:36: note: Parameter 'state' can be declared with const
void BM_function(benchmark::State& state) {
                                   ^
build/_deps/googlebenchmark-src/test/register_benchmark_test.cc:103:37: style: Parameter 'st' can be declared with const [constParameter]
  void operator()(benchmark::State& st) {
                                    ^
build/_deps/googlebenchmark-src/test/register_benchmark_test.cc:49:21: style: Consider using std::copy algorithm instead of a raw loop. [useStlAlgorithm]
    ExpectedResults.push_back(N);
                    ^
build/_deps/googlebenchmark-src/test/repetitions_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/repetitions_test.cc:9:54: style: Parameter 'state' can be declared with const. However it seems that 'BM_ExplicitRepetitions' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_ExplicitRepetitions(benchmark::State& state) {
                                                     ^
build/_deps/googlebenchmark-src/test/repetitions_test.cc:13:11: note: You might need to cast the function pointer here
BENCHMARK(BM_ExplicitRepetitions)->Repetitions(2);
          ^
build/_deps/googlebenchmark-src/test/repetitions_test.cc:9:54: note: Parameter 'state' can be declared with const
static void BM_ExplicitRepetitions(benchmark::State& state) {
                                                     ^
build/_deps/googlebenchmark-src/test/repetitions_test.cc:111:54: style: Parameter 'state' can be declared with const. However it seems that 'BM_ImplicitRepetitions' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_ImplicitRepetitions(benchmark::State& state) {
                                                     ^
build/_deps/googlebenchmark-src/test/repetitions_test.cc:115:11: note: You might need to cast the function pointer here
BENCHMARK(BM_ImplicitRepetitions);
          ^
build/_deps/googlebenchmark-src/test/repetitions_test.cc:111:54: note: Parameter 'state' can be declared with const
static void BM_ImplicitRepetitions(benchmark::State& state) {
                                                     ^
build/_deps/googlebenchmark-src/test/report_aggregates_only_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/report_aggregates_only_test.cc:13:41: style: Parameter 'state' can be declared with const. However it seems that 'BM_SummaryRepeat' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_SummaryRepeat(benchmark::State& state) {
                                        ^
build/_deps/googlebenchmark-src/test/report_aggregates_only_test.cc:17:11: note: You might need to cast the function pointer here
BENCHMARK(BM_SummaryRepeat)->Repetitions(3)->ReportAggregatesOnly();
          ^
build/_deps/googlebenchmark-src/test/report_aggregates_only_test.cc:13:41: note: Parameter 'state' can be declared with const
void BM_SummaryRepeat(benchmark::State& state) {
                                        ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:67:33: style: Parameter 'state' can be declared with const. However it seems that 'BM_basic' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_basic(benchmark::State& state) {
                                ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:71:11: note: You might need to cast the function pointer here
BENCHMARK(BM_basic);
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:67:33: note: Parameter 'state' can be declared with const
void BM_basic(benchmark::State& state) {
                                ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:184:49: style: Parameter 'state' can be declared with const. However it seems that 'BM_time_label_nanosecond' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_time_label_nanosecond(benchmark::State& state) {
                                                ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:188:11: note: You might need to cast the function pointer here
BENCHMARK(BM_time_label_nanosecond)->Unit(benchmark::kNanosecond);
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:184:49: note: Parameter 'state' can be declared with const
void BM_time_label_nanosecond(benchmark::State& state) {
                                                ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:207:50: style: Parameter 'state' can be declared with const. However it seems that 'BM_time_label_microsecond' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_time_label_microsecond(benchmark::State& state) {
                                                 ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:211:11: note: You might need to cast the function pointer here
BENCHMARK(BM_time_label_microsecond)->Unit(benchmark::kMicrosecond);
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:207:50: note: Parameter 'state' can be declared with const
void BM_time_label_microsecond(benchmark::State& state) {
                                                 ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:230:50: style: Parameter 'state' can be declared with const. However it seems that 'BM_time_label_millisecond' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_time_label_millisecond(benchmark::State& state) {
                                                 ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:234:11: note: You might need to cast the function pointer here
BENCHMARK(BM_time_label_millisecond)->Unit(benchmark::kMillisecond);
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:230:50: note: Parameter 'state' can be declared with const
void BM_time_label_millisecond(benchmark::State& state) {
                                                 ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:253:45: style: Parameter 'state' can be declared with const. However it seems that 'BM_time_label_second' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_time_label_second(benchmark::State& state) {
                                            ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:257:11: note: You might need to cast the function pointer here
BENCHMARK(BM_time_label_second)->Unit(benchmark::kSecond);
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:253:45: note: Parameter 'state' can be declared with const
void BM_time_label_second(benchmark::State& state) {
                                            ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:304:39: style: Parameter 'state' can be declared with const. However it seems that 'BM_no_arg_name' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_no_arg_name(benchmark::State& state) {
                                      ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:308:11: note: You might need to cast the function pointer here
BENCHMARK(BM_no_arg_name)->Arg(3);
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:304:39: note: Parameter 'state' can be declared with const
void BM_no_arg_name(benchmark::State& state) {
                                      ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:324:36: style: Parameter 'state' can be declared with const. However it seems that 'BM_arg_name' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_arg_name(benchmark::State& state) {
                                   ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:328:11: note: You might need to cast the function pointer here
BENCHMARK(BM_arg_name)->ArgName("first")->Arg(3);
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:324:36: note: Parameter 'state' can be declared with const
void BM_arg_name(benchmark::State& state) {
                                   ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:344:37: style: Parameter 'state' can be declared with const. However it seems that 'BM_arg_names' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_arg_names(benchmark::State& state) {
                                    ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:348:11: note: You might need to cast the function pointer here
BENCHMARK(BM_arg_names)->Args({2, 5, 4})->ArgNames({"first", "", "third"});
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:344:37: note: Parameter 'state' can be declared with const
void BM_arg_names(benchmark::State& state) {
                                    ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:366:32: style: Parameter 'state' can be declared with const. However it seems that 'BM_name' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_name(benchmark::State& state) {
                               ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:370:11: note: You might need to cast the function pointer here
BENCHMARK(BM_name)->Name("BM_custom_name");
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:366:32: note: Parameter 'state' can be declared with const
void BM_name(benchmark::State& state) {
                               ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:392:35: style: Parameter 'state' can be declared with const. However it seems that 'BM_BigArgs' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_BigArgs(benchmark::State& state) {
                                  ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:396:11: note: You might need to cast the function pointer here
BENCHMARK(BM_BigArgs)->RangeMultiplier(2)->Range(1U << 30U, 1U << 31U);
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:392:35: note: Parameter 'state' can be declared with const
void BM_BigArgs(benchmark::State& state) {
                                  ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:422:34: style: Parameter 'state' can be declared with const. However it seems that 'BM_Repeat' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_Repeat(benchmark::State& state) {
                                 ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:555:11: note: You might need to cast the function pointer here
BENCHMARK(BM_Repeat)->Repetitions(4);
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:422:34: note: Parameter 'state' can be declared with const
void BM_Repeat(benchmark::State& state) {
                                 ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:636:38: style: Parameter 'state' can be declared with const. However it seems that 'BM_RepeatOnce' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_RepeatOnce(benchmark::State& state) {
                                     ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:640:11: note: You might need to cast the function pointer here
BENCHMARK(BM_RepeatOnce)->Repetitions(1)->ReportAggregatesOnly();
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:636:38: note: Parameter 'state' can be declared with const
void BM_RepeatOnce(benchmark::State& state) {
                                     ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:653:41: style: Parameter 'state' can be declared with const. However it seems that 'BM_SummaryRepeat' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_SummaryRepeat(benchmark::State& state) {
                                        ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:657:11: note: You might need to cast the function pointer here
BENCHMARK(BM_SummaryRepeat)->Repetitions(3)->ReportAggregatesOnly();
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:653:41: note: Parameter 'state' can be declared with const
void BM_SummaryRepeat(benchmark::State& state) {
                                        ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:704:42: style: Parameter 'state' can be declared with const. However it seems that 'BM_SummaryDisplay' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_SummaryDisplay(benchmark::State& state) {
                                         ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:708:11: note: You might need to cast the function pointer here
BENCHMARK(BM_SummaryDisplay)->Repetitions(2)->DisplayAggregatesOnly();
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:704:42: note: Parameter 'state' can be declared with const
void BM_SummaryDisplay(benchmark::State& state) {
                                         ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:754:42: style: Parameter 'state' can be declared with const. However it seems that 'BM_RepeatTimeUnit' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void BM_RepeatTimeUnit(benchmark::State& state) {
                                         ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:758:11: note: You might need to cast the function pointer here
BENCHMARK(BM_RepeatTimeUnit)
          ^
build/_deps/googlebenchmark-src/test/reporter_output_test.cc:754:42: note: Parameter 'state' can be declared with const
void BM_RepeatTimeUnit(benchmark::State& state) {
                                         ^
build/_deps/googlebenchmark-src/test/skip_with_error_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/skip_with_error_test.cc:132:14: warning: Variable 'It' is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug. [assignmentInAssert]
      assert(++It != End);
             ^
build/_deps/googlebenchmark-src/test/spec_arg_test.cc:86:34: performance:inconclusive: The const variable 'matched_functions' is assigned a copy of the data. You can avoid the unnecessary data copying by converting 'matched_functions' to const reference. [redundantCopyLocalConst]
  const std::vector<std::string> matched_functions =
                                 ^
build/_deps/googlebenchmark-src/test/spec_arg_test.cc:44:44: style: Parameter 'state' can be declared with const. However it seems that 'BM_NotChosen' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_NotChosen(benchmark::State& state) {
                                           ^
build/_deps/googlebenchmark-src/test/spec_arg_test.cc:49:11: note: You might need to cast the function pointer here
BENCHMARK(BM_NotChosen);
          ^
build/_deps/googlebenchmark-src/test/spec_arg_test.cc:44:44: note: Parameter 'state' can be declared with const
static void BM_NotChosen(benchmark::State& state) {
                                           ^
build/_deps/googlebenchmark-src/test/spec_arg_test.cc:51:41: style: Parameter 'state' can be declared with const. However it seems that 'BM_Chosen' is a callback function, if 'state' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
static void BM_Chosen(benchmark::State& state) {
                                        ^
build/_deps/googlebenchmark-src/test/spec_arg_test.cc:55:11: note: You might need to cast the function pointer here
BENCHMARK(BM_Chosen);
          ^
build/_deps/googlebenchmark-src/test/spec_arg_test.cc:51:41: note: Parameter 'state' can be declared with const
static void BM_Chosen(benchmark::State& state) {
                                        ^
build/_deps/googlebenchmark-src/test/state_assembly_test.cc:19:10: style: Variable 'S' can be declared with const [constVariable]
  State& S = GetState();
         ^
build/_deps/googlebenchmark-src/test/statistics_gtest.cc:15:1: error: syntax error [syntaxError]
TEST(StatisticsTest, Median) {
^
build/_deps/googlebenchmark-src/test/string_util_gtest.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/string_util_gtest.cc:70:1: error: syntax error [syntaxError]
TEST(StringUtilTest, stoi){{size_t pos = 0;
^
build/_deps/googlebenchmark-src/test/templated_fixture_test.cc:15:1: error: There is an unknown macro here somewhere. Configuration is required. If BENCHMARK_TEMPLATE_F is a macro then please configure it. [unknownMacro]
BENCHMARK_TEMPLATE_F(MyFixture, Foo, int)(benchmark::State& st) {
^
build/_deps/googlebenchmark-src/test/user_counters_tabular_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/user_counters_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googlebenchmark-src/test/user_counters_thousands_test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc:660:13: style:inconclusive: The member function 'testing::::MockObjectRegistry::states' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  StateMap& states() { return states_; }
            ^
build/_deps/googletest-src/googlemock/test/gmock-actions_test.cc:97:1: error: syntax error [syntaxError]
TEST(BuiltInDefaultValueTest, ExistsForPointerTypes) {
^
build/_deps/googletest-src/googlemock/test/gmock-cardinalities_test.cc:62:1: error: syntax error [syntaxError]
TEST(CardinalityTest, IsDefaultConstructable) {
^
build/_deps/googletest-src/googlemock/test/gmock-function-mocker_test.cc:297:1: error: syntax error [syntaxError]
TYPED_TEST(FunctionMockerTest, MocksVoidFunction) {
^
build/_deps/googletest-src/googlemock/test/gmock-internal-utils_test.cc:77:1: error: syntax error [syntaxError]
TEST(JoinAsTupleTest, JoinsOneTuple) {
^
build/_deps/googletest-src/googlemock/test/gmock-matchers_test.cc:172:1: error: syntax error [syntaxError]
TEST(MonotonicMatcherTest, IsPrintable) {
^
build/_deps/googletest-src/googlemock/test/gmock-more-actions_test.cc:1460:39: error: syntax error [syntaxError]
                HAS_1_TEMPLATE_PARAMS(template <typename Pointee> class,
                                      ^
build/_deps/googletest-src/googlemock/test/gmock-nice-strict_test.cc:239:1: error: syntax error [syntaxError]
TEST(NiceMockTest, AllowsExpectedCall) {
^
build/_deps/googletest-src/googlemock/test/gmock-nice-strict_test.cc:142:1: error: syntax error [syntaxError]
TEST(RawMockTest, WarningForUninterestingCall) {
^
build/_deps/googletest-src/googlemock/test/gmock-pp-string_test.cc:110:3: error: There is an unknown macro here somewhere. Configuration is required. If sss is a macro then please configure it. [unknownMacro]
  EXPECT_EXPANSION("0", GMOCK_PP_IS_BEGIN_PARENS(sss() sss));
  ^
build/_deps/googletest-src/googlemock/test/gmock-pp_test.cc:44:41: error: There is an unknown macro here somewhere. Configuration is required. If sss is a macro then please configure it. [unknownMacro]
static_assert(!GMOCK_PP_IS_BEGIN_PARENS(sss() sss), "");
                                        ^
build/_deps/googletest-src/googlemock/test/gmock-spec-builders_test.cc:123:1: error: syntax error [syntaxError]
TEST(MockMethodTest, CanInstantiateWithIncompleteArgType) {
^
build/_deps/googletest-src/googlemock/test/gmock_ex_test.cc:56:1: error: syntax error [syntaxError]
TEST(DefaultValueTest, ThrowsRuntimeErrorWhenNoDefaultValue) {
^
build/_deps/googletest-src/googlemock/test/gmock_leak_test_.cc:58:1: error: syntax error [syntaxError]
TEST(LeakTest, LeakedMockWithExpectCallCausesFailureWhenLeakCheckingIsEnabled) {
^
build/_deps/googletest-src/googlemock/test/gmock_stress_test.cc:197:1: error: syntax error [syntaxError]
TEST(StressTest, CanUseGMockWithThreads) {
^
build/_deps/googletest-src/googletest/samples/sample10_unittest.cc:94:1: error: syntax error [syntaxError]
TEST(ListenersTest, DoesNotLeak) {
^
build/_deps/googletest-src/googletest/samples/sample1_unittest.cc:100:1: error: syntax error [syntaxError]
TEST(FactorialTest, Zero) {
^
build/_deps/googletest-src/googletest/samples/sample2.cc:49:32: style:inconclusive: Function 'Set' argument 1 names different: declaration 'c_string' definition 'a_c_string'. [funcArgNamesDifferent]
void MyString::Set(const char* a_c_string) {
                               ^
build/_deps/googletest-src/googletest/samples/sample2.h:77:24: note: Function 'Set' argument 1 names different: declaration 'c_string' definition 'a_c_string'.
  void Set(const char* c_string);
                       ^
build/_deps/googletest-src/googletest/samples/sample2.cc:49:32: note: Function 'Set' argument 1 names different: declaration 'c_string' definition 'a_c_string'.
void MyString::Set(const char* a_c_string) {
                               ^
build/_deps/googletest-src/googletest/samples/sample2_unittest.cc:77:1: error: syntax error [syntaxError]
TEST(MyString, ConstructorFromCString) {
^
build/_deps/googletest-src/googletest/samples/sample3_unittest.cc:120:1: error: syntax error [syntaxError]
TEST_F(QueueTestSmpl3, DefaultConstructor) {
^
build/_deps/googletest-src/googletest/samples/sample5_unittest.cc:97:1: error: syntax error [syntaxError]
TEST_F(IntegerFunctionTest, Factorial) {
^
build/_deps/googletest-src/googletest/samples/sample6_unittest.cc:97:1: error: syntax error [syntaxError]
TYPED_TEST(PrimeTableTest, ReturnsFalseForNonPrimes) {
^
build/_deps/googletest-src/googletest/samples/sample7_unittest.cc:79:1: error: syntax error [syntaxError]
TEST_P(PrimeTableTestSmpl7, ReturnsFalseForNonPrimes) {
^
build/_deps/googletest-src/googletest/samples/sample8_unittest.cc:107:1: error: syntax error [syntaxError]
TEST_P(PrimeTableTest, ReturnsFalseForNonPrimes) {
^
build/_deps/googletest-src/googletest/samples/sample9_unittest.cc:90:1: error: syntax error [syntaxError]
TEST(CustomOutputTest, PrintsMessage) {
^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1178:0: information: Skipping configuration 'GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_;GTEST_HAS_DEATH_TEST' since the value of 'GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_();
^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1386:30: style: Variable 'child_pid' is reassigned a value before the old one has been used. [redundantAssignment]
  if (use_fork && (child_pid = fork()) == 0) {
                             ^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1378:15: note: child_pid is assigned
    child_pid = clone(&ExecDeathTestChildMain, stack_top, SIGCHLD, &args);
              ^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1386:30: note: child_pid is overwritten
  if (use_fork && (child_pid = fork()) == 0) {
                             ^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1088:48: style:inconclusive: Function 'ForkingDeathTest' argument 1 names different: declaration 'statement' definition 'a_statement'. [funcArgNamesDifferent]
ForkingDeathTest::ForkingDeathTest(const char* a_statement,
                                               ^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1074:32: note: Function 'ForkingDeathTest' argument 1 names different: declaration 'statement' definition 'a_statement'.
  ForkingDeathTest(const char* statement, Matcher<const std::string&> matcher);
                               ^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1088:48: note: Function 'ForkingDeathTest' argument 1 names different: declaration 'statement' definition 'a_statement'.
ForkingDeathTest::ForkingDeathTest(const char* a_statement,
                                               ^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:191:0: information: Skipping configuration 'GTEST_HAS_DEATH_TEST;GTEST_KILLED_BY_SIGNAL_OVERRIDE_;GTEST_OS_FUCHSIA=0;GTEST_OS_WINDOWS=0' since the value of 'GTEST_KILLED_BY_SIGNAL_OVERRIDE_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (GTEST_KILLED_BY_SIGNAL_OVERRIDE_(signum_, exit_status, &result)) {
^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:867:7: style:inconclusive: The member function 'testing::internal::Arguments::size' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  int size() {
      ^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1224:7: style: struct member 'ExecDeathTestArgs::close_fd' is never used. [unusedStructMember]
  int close_fd;       // File descriptor to close; the read end of a pipe
      ^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:221:0: information: Skipping configuration 'GTEST_HAS_DEATH_TEST;WCOREDUMP' since the value of 'WCOREDUMP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (WCOREDUMP(exit_code)) {
^
build/_deps/googletest-src/googletest/src/gtest-filepath.cc:113:3: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed. [duplicateBreak]
  return FilePath(result == nullptr ? "" : cwd);
  ^
build/_deps/googletest-src/googletest/src/gtest-filepath.cc:105:0: information: Skipping configuration 'PATH_MAX' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char cwd[GTEST_PATH_MAX_ + 1] = { '\0' };
^
build/_deps/googletest-src/googletest/src/gtest-filepath.cc:105:0: information: Skipping configuration '_XOPEN_PATH_MAX' since the value of '_XOPEN_PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char cwd[GTEST_PATH_MAX_ + 1] = { '\0' };
^
build/_deps/googletest-src/googletest/src/gtest-port.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googletest-src/googletest/src/gtest-port.cc:1367:0: information: Skipping configuration 'GTEST_GET_BOOL_FROM_ENV_' since the value of 'GTEST_GET_BOOL_FROM_ENV_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_GET_BOOL_FROM_ENV_(flag, default_value);
^
build/_deps/googletest-src/googletest/src/gtest-port.cc:1381:0: information: Skipping configuration 'GTEST_GET_INT32_FROM_ENV_' since the value of 'GTEST_GET_INT32_FROM_ENV_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_GET_INT32_FROM_ENV_(flag, default_value);
^
build/_deps/googletest-src/googletest/src/gtest-port.cc:1424:0: information: Skipping configuration 'GTEST_GET_STRING_FROM_ENV_' since the value of 'GTEST_GET_STRING_FROM_ENV_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_GET_STRING_FROM_ENV_(flag, default_value);
^
build/_deps/googletest-src/googletest/src/gtest.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googletest-src/googletest/src/gtest.cc:5332:34: error: Null pointer dereference: static_cast<volatile int*>(nullptr) [nullPointer]
      *static_cast<volatile int*>(nullptr) = 1;
                                 ^
build/_deps/googletest-src/googletest/src/gtest.cc:3835:1: style:inconclusive: Function 'OnTestProgramStart' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3763:43: note: Function 'OnTestProgramStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnTestProgramStart(const UnitTest& unit_test) override;
                                          ^
build/_deps/googletest-src/googletest/src/gtest.cc:3835:1: note: Function 'OnTestProgramStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3836:1: style:inconclusive: Function 'OnEnvironmentsSetUpStart' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3765:49: note: Function 'OnEnvironmentsSetUpStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
                                                ^
build/_deps/googletest-src/googletest/src/gtest.cc:3836:1: note: Function 'OnEnvironmentsSetUpStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3842:1: style:inconclusive: Function 'OnTestStart' argument 1 names different: declaration 'test_info' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3772:36: note: Function 'OnTestStart' argument 1 names different: declaration 'test_info' definition 'parameter'.
  void OnTestStart(const TestInfo& test_info) override;
                                   ^
build/_deps/googletest-src/googletest/src/gtest.cc:3842:1: note: Function 'OnTestStart' argument 1 names different: declaration 'test_info' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3843:1: style:inconclusive: Function 'OnTestPartResult' argument 1 names different: declaration 'result' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3773:47: note: Function 'OnTestPartResult' argument 1 names different: declaration 'result' definition 'parameter'.
  void OnTestPartResult(const TestPartResult& result) override;
                                              ^
build/_deps/googletest-src/googletest/src/gtest.cc:3843:1: note: Function 'OnTestPartResult' argument 1 names different: declaration 'result' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3844:1: style:inconclusive: Function 'OnEnvironmentsTearDownStart' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3780:52: note: Function 'OnEnvironmentsTearDownStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
                                                   ^
build/_deps/googletest-src/googletest/src/gtest.cc:3844:1: note: Function 'OnEnvironmentsTearDownStart' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3845:1: style:inconclusive: Function 'OnEnvironmentsSetUpEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3766:47: note: Function 'OnEnvironmentsSetUpEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
                                              ^
build/_deps/googletest-src/googletest/src/gtest.cc:3845:1: note: Function 'OnEnvironmentsSetUpEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3846:1: style:inconclusive: Function 'OnEnvironmentsTearDownEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3781:50: note: Function 'OnEnvironmentsTearDownEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
                                                 ^
build/_deps/googletest-src/googletest/src/gtest.cc:3846:1: note: Function 'OnEnvironmentsTearDownEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3847:1: style:inconclusive: Function 'OnTestEnd' argument 1 names different: declaration 'test_info' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3774:34: note: Function 'OnTestEnd' argument 1 names different: declaration 'test_info' definition 'parameter'.
  void OnTestEnd(const TestInfo& test_info) override;
                                 ^
build/_deps/googletest-src/googletest/src/gtest.cc:3847:1: note: Function 'OnTestEnd' argument 1 names different: declaration 'test_info' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3853:1: style:inconclusive: Function 'OnTestProgramEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'. [funcArgNamesDifferent]
GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:3783:41: note: Function 'OnTestProgramEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
  void OnTestProgramEnd(const UnitTest& unit_test) override;
                                        ^
build/_deps/googletest-src/googletest/src/gtest.cc:3853:1: note: Function 'OnTestProgramEnd' argument 1 names different: declaration 'unit_test' definition 'parameter'.
GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
^
build/_deps/googletest-src/googletest/src/gtest.cc:4272:18: performance: The conversion from const char* as returned by c_str() to std::string creates an unnecessary string copy. Solve that by directly passing the string. [stlcstrParam]
              << EscapeXmlAttribute(summary.c_str()) << "\">";
                 ^
build/_deps/googletest-src/googletest/src/gtest.cc:584:0: information: Skipping configuration 'GTEST_CUSTOM_GET_ARGVS_' since the value of 'GTEST_CUSTOM_GET_ARGVS_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
^
build/_deps/googletest-src/googletest/src/gtest.cc:6662:0: information: Skipping configuration 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' since the value of 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
^
build/_deps/googletest-src/googletest/src/gtest.cc:6672:0: information: Skipping configuration 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' since the value of 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
^
build/_deps/googletest-src/googletest/src/gtest.cc:6688:0: information: Skipping configuration 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' since the value of 'GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
^
build/_deps/googletest-src/googletest/src/gtest.cc:6696:0: information: Skipping configuration 'GTEST_CUSTOM_TEMPDIR_FUNCTION_' since the value of 'GTEST_CUSTOM_TEMPDIR_FUNCTION_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
^
build/_deps/googletest-src/googletest/src/gtest.cc:5628:0: information: Skipping configuration 'GTEST_CUSTOM_TEST_EVENT_LISTENER_' since the value of 'GTEST_CUSTOM_TEST_EVENT_LISTENER_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
^
build/_deps/googletest-src/googletest/src/gtest.cc:5773:0: information: Skipping configuration 'GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_;GTEST_HAS_DEATH_TEST' since the value of 'GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
^
build/_deps/googletest-src/googletest/src/gtest.cc:6244:13: style: Condition 'IsTrue(false)' is always false [knownConditionTrueFalse]
  if (IsTrue(false))
            ^
build/_deps/googletest-src/googletest/test/googletest-death-test-test.cc:1437:29: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  EXPECT_DEATH_IF_SUPPORTED(;, "");
                            ^
build/_deps/googletest-src/googletest/test/googletest-death-test-test.cc:761:65: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  ASSERT_DEBUG_DEATH(GTEST_LOG_(INFO) << "In ASSERT_DEBUG_DEATH"; return, "")
                                                                ^
build/_deps/googletest-src/googletest/test/googletest-death-test-test.cc:1356:53: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  EXPECT_NONFATAL_FAILURE(EXPECT_DEATH_IF_SUPPORTED(;, ""), "");
                                                    ^
build/_deps/googletest-src/googletest/test/googletest-failfast-unittest_.cc:48:1: error: syntax error [syntaxError]
TEST_F(HasFixtureTest, Test0) {}
^
build/_deps/googletest-src/googletest/test/googletest-filepath-test.cc:97:1: error: syntax error [syntaxError]
TEST(IsEmptyTest, ReturnsTrueForEmptyPath) {
^
build/_deps/googletest-src/googletest/test/googletest-filter-unittest_.cc:49:1: error: syntax error [syntaxError]
TEST_F(FooTest, Abc) {
^
build/_deps/googletest-src/googletest/test/googletest-global-environment-unittest_.cc:50:1: error: syntax error [syntaxError]
TEST(SomeTest, DoesFoo) { FAIL() << "Unexpected call"; }
^
build/_deps/googletest-src/googletest/test/googletest-listener-test.cc:226:1: error: syntax error [syntaxError]
TEST_F(ListenerTest, DoesFoo) {
^
build/_deps/googletest-src/googletest/test/googletest-message-test.cc:50:1: error: syntax error [syntaxError]
TEST(MessageTest, CopyConstructor) {
^
build/_deps/googletest-src/googletest/test/googletest-options-test.cc:63:1: error: syntax error [syntaxError]
TEST(XmlOutputTest, GetOutputFormatDefault) {
^
build/_deps/googletest-src/googletest/test/googletest-output-test_.cc:105:26: error: syntax error [syntaxError]
INSTANTIATE_TEST_SUITE_P(, EmptyBasenameParamInst, testing::Values(1));
                         ^
build/_deps/googletest-src/googletest/test/googletest-param-test-invalid-name1-test_.cc:36:1: error: syntax error [syntaxError]
TEST_P(DummyTest, Dummy) {
^
build/_deps/googletest-src/googletest/test/googletest-param-test-invalid-name2-test_.cc:41:1: error: syntax error [syntaxError]
TEST_P(DummyTest, Dummy) {
^
build/_deps/googletest-src/googletest/test/googletest-param-test-test.cc:1087:1: error: syntax error [syntaxError]
TEST_P(NotInstantiatedTest, Used) { }
^
build/_deps/googletest-src/googletest/test/googletest-port-test.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googletest-src/googletest/test/googletest-port-test.cc:67:1: error: syntax error [syntaxError]
TEST(IsXDigitTest, ReturnsFalseForNarrowNonAscii) {
^
build/_deps/googletest-src/googletest/test/googletest-port-test.cc:368:0: information: Skipping configuration 'GTEST_USES_SIMPLE_RE' since the value of 'GTEST_USES_SIMPLE_RE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EXPECT_TRUE(GTEST_USES_SIMPLE_RE);
^
build/_deps/googletest-src/googletest/test/googletest-printers-test.cc:302:1: error: syntax error [syntaxError]
TEST(PrintEnumTest, AnonymousEnum) {
^
build/_deps/googletest-src/googletest/test/googletest-shuffle-test_.cc:49:1: error: syntax error [syntaxError]
TEST_F(A, A) {}
^
build/_deps/googletest-src/googletest/test/googletest-test-part-test.cc:56:1: error: syntax error [syntaxError]
TEST_F(TestPartResultTest, ConstructorWorks) {
^
build/_deps/googletest-src/googletest/test/gtest-typed-test_test.cc:164:1: error: syntax error [syntaxError]
TYPED_TEST(NumericTest, DefaultIsZero) {
^
build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc:100:1: error: syntax error [syntaxError]
TYPED_TEST(TestSuiteWithCommentTest, Dummy) {}
^
build/_deps/googletest-src/googletest/test/gtest_environment_test.cc:107:1: error: syntax error [syntaxError]
TEST(FooTest, Bar) {
^
build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc:93:8: style:inconclusive: The member function 'PredFunctor1::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  bool operator()(const T1& v1) {
       ^
build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc:479:8: style:inconclusive: The member function 'PredFunctor2::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  bool operator()(const T1& v1,
       ^
build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc:907:8: style:inconclusive: The member function 'PredFunctor3::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  bool operator()(const T1& v1,
       ^
build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc:1377:8: style:inconclusive: The member function 'PredFunctor4::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  bool operator()(const T1& v1,
       ^
build/_deps/googletest-src/googletest/test/gtest_pred_impl_unittest.cc:1889:8: style:inconclusive: The member function 'PredFunctor5::operator()' can be made a const function. Making this function 'const' should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state? [functionConst]
  bool operator()(const T1& v1,
       ^
build/_deps/googletest-src/googletest/test/gtest_premature_exit_test.cc:79:1: error: syntax error [syntaxError]
TEST_F(PrematureExitDeathTest, FileExistsDuringExecutionOfDeathTest) {
^
build/_deps/googletest-src/googletest/test/gtest_repeat_test.cc:85:1: error: syntax error [syntaxError]
TEST(FooTest, ShouldFail) {
^
build/_deps/googletest-src/googletest/test/gtest_sole_header_test.cc:43:27: error: There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it. [unknownMacro]
  EXPECT_NO_FATAL_FAILURE(;);
                          ^
build/_deps/googletest-src/googletest/test/gtest_stress_test.cc:119:1: error: syntax error [syntaxError]
TEST(StressTest, CanUseScopedTraceAndAssertionsInManyThreads) {
^
build/_deps/googletest-src/googletest/test/gtest_unittest.cc:0:0: information: The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. [toomanyconfigs]

^
build/_deps/googletest-src/googletest/test/gtest_unittest.cc:5412:26: error: syntax error [syntaxError]
INSTANTIATE_TEST_SUITE_P(, CodeLocationForTESTP, Values(0));
                         ^
build/_deps/googletest-src/googletest/test/googletest-list-tests-unittest_.cc:93:1: error: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest' [ctuOneDefinitionRuleViolation]
class ValueParamTest : public testing::TestWithParam<MyType> {
^
build/_deps/googletest-src/googletest/test/gtest_list_output_unittest_.cc:51:1: note: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest'
class ValueParamTest : public ::testing::TestWithParam<int> {};
^
build/_deps/googletest-src/googletest/test/googletest-list-tests-unittest_.cc:93:1: note: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest'
class ValueParamTest : public testing::TestWithParam<MyType> {
^
build/_deps/googletest-src/googletest/test/googletest-list-tests-unittest_.cc:116:1: error: The one definition rule is violated, different classes/structs have the same name 'TypedTest' [ctuOneDefinitionRuleViolation]
class TypedTest : public testing::Test {
^
build/_deps/googletest-src/googletest/test/gtest_list_output_unittest_.cc:57:1: note: The one definition rule is violated, different classes/structs have the same name 'TypedTest'
class TypedTest : public ::testing::Test {};
^
build/_deps/googletest-src/googletest/test/googletest-list-tests-unittest_.cc:116:1: note: The one definition rule is violated, different classes/structs have the same name 'TypedTest'
class TypedTest : public testing::Test {
^
build/_deps/googletest-src/googletest/test/googletest-list-tests-unittest_.cc:93:1: error: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest' [ctuOneDefinitionRuleViolation]
class ValueParamTest : public testing::TestWithParam<MyType> {
^
build/_deps/googletest-src/googletest/test/gtest_xml_output_unittest_.cc:161:1: note: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest'
class ValueParamTest : public TestWithParam<int> {};
^
build/_deps/googletest-src/googletest/test/googletest-list-tests-unittest_.cc:93:1: note: The one definition rule is violated, different classes/structs have the same name 'ValueParamTest'
class ValueParamTest : public testing::TestWithParam<MyType> {
^
build/_deps/googletest-src/googletest/test/googletest-list-tests-unittest_.cc:116:1: error: The one definition rule is violated, different classes/structs have the same name 'TypedTest' [ctuOneDefinitionRuleViolation]
class TypedTest : public testing::Test {
^
build/_deps/googletest-src/googletest/test/gtest_xml_output_unittest_.cc:168:23: note: The one definition rule is violated, different classes/structs have the same name 'TypedTest'
template <typename T> class TypedTest : public Test {};
                      ^
build/_deps/googletest-src/googletest/test/googletest-list-tests-unittest_.cc:116:1: note: The one definition rule is violated, different classes/structs have the same name 'TypedTest'
class TypedTest : public testing::Test {
^
build/_deps/googlebenchmark-src/src/string_util.cc:114:0: style: The function 'AppendHumanReadable' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1118:0: style: The function 'AssumeRole' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock-cardinalities.cc:142:0: style: The function 'AtMost' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-port.cc:1217:0: style: The function 'CaptureStdout' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-port.cc:1290:0: style: The function 'ClearInjectableArgvs' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:1676:0: style: The function 'CmpHelperSTRCASEEQ' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:1706:0: style: The function 'CmpHelperSTRCASENE' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:1660:0: style: The function 'CmpHelperSTREQ' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:1692:0: style: The function 'CmpHelperSTRNE' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:483:0: style: The function 'CreateDenseRange' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:477:0: style: The function 'CreateRange' is never used. [unusedFunction]

^
test/engine/benchmark/DbBenchmark.cpp:75:0: style: The function 'DBGet' is never used. [unusedFunction]

^
test/engine/benchmark/DbBenchmark.cpp:116:0: style: The function 'DBGetArguments' is never used. [unusedFunction]

^
test/engine/benchmark/DbBenchmark.cpp:128:0: style: The function 'DBScan' is never used. [unusedFunction]

^
test/engine/benchmark/DbBenchmark.cpp:178:0: style: The function 'DBScanArguments' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:1652:0: style: The function 'DoubleLE' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:1563:0: style: The function 'DoubleNearPredFormat' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:3917:0: style: The function 'EscapeXmlText' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:232:0: style: The function 'ExitedUnsuccessfully' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:1645:0: style: The function 'FloatLE' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock-matchers.cc:51:0: style: The function 'FormatMatcherDescription' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/src/sysinfo.cc:120:0: style: The function 'GetAsInteger' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/src/sysinfo.cc:118:0: style: The function 'GetAsString' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:1547:0: style: The function 'GetBoolAssertionFailureMessage' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-port.cc:1227:0: style: The function 'GetCapturedStdout' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc:112:0: style: The function 'GetFailureReporter' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc:187:0: style: The function 'GetWithoutMatchers' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc:189:0: style: The function 'IllegalDoDefault' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:146:0: style: The function 'InDeathTestChild' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/src/benchmark.cc:604:0: style: The function 'InitializeStreams' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:469:0: style: The function 'InsertSyntheticTestCase' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:1789:0: style: The function 'IsNotSubstring' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/samples/sample1.cc:45:0: style: The function 'IsPrime' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock-cardinalities.cc:76:0: style: The function 'IsSatisfiedByCallCount' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock-cardinalities.cc:80:0: style: The function 'IsSaturatedByCallCount' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:1777:0: style: The function 'IsSubstring' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc:72:0: style: The function 'LogWithLocation' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:2756:0: style: The function 'MakeAndRegisterTestInfo' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1586:0: style: The function 'ParseInternalRunDeathTestFlag' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/samples/sample4.cc:52:0: style: The function 'Print' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-printers.cc:129:0: style: The function 'PrintBytesInObjectTo' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-printers.cc:503:0: style: The function 'PrintStringTo' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-printers.cc:517:0: style: The function 'PrintU16StringTo' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-printers.cc:521:0: style: The function 'PrintU32StringTo' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-printers.cc:512:0: style: The function 'PrintU8StringTo' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-printers.cc:526:0: style: The function 'PrintWideStringTo' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/src/benchmark_register.cc:183:0: style: The function 'RegisterBenchmarkInternal' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:518:0: style: The function 'RegisterTypeParameterizedTestSuiteInstantiation' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc:96:0: style: The function 'ReportFailure' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:2768:0: style: The function 'ReportInvalidTestSuiteType' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/src/benchmark.cc:618:0: style: The function 'ReportUnrecognizedArguments' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/test/googletest-catch-exceptions-test_.cc:149:0: style: The function 'SetUpTestSuite' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/src/benchmark.cc:616:0: style: The function 'Shutdown' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/src/sleep.cc:62:0: style: The function 'SleepForSeconds' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/test/googletest-catch-exceptions-test_.cc:113:0: style: The function 'TearDownTestSuite' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest.cc:6694:0: style: The function 'TempDir' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-printers.cc:370:0: style: The function 'UniversalPrintArray' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/src/benchmark.cc:132:0: style: The function 'UseCharPointer' is never used. [unusedFunction]

^
build/_deps/googletest-src/googletest/src/gtest-death-test.cc:1095:0: style: The function 'Wait' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock_main.cc:61:0: style: The function '_tmain' is never used. [unusedFunction]

^
build/_deps/googletest-src/googlemock/src/gmock_main.cc:45:0: style: The function 'loop' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/clobber_memory_assembly_test.cc:15:0: style: The function 'test_basic' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:108:0: style: The function 'test_div_by_two' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/state_assembly_test.cc:18:0: style: The function 'test_for_auto_loop' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:118:0: style: The function 'test_inc_integer' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:142:0: style: The function 'test_pointer_const_lvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:153:0: style: The function 'test_pointer_lvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:132:0: style: The function 'test_pointer_rvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/clobber_memory_assembly_test.cc:36:0: style: The function 'test_redundant_read' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/clobber_memory_assembly_test.cc:50:0: style: The function 'test_redundant_read2' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/clobber_memory_assembly_test.cc:26:0: style: The function 'test_redundant_store' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/state_assembly_test.cc:41:0: style: The function 'test_while_loop' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:81:0: style: The function 'test_with_const_lvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:89:0: style: The function 'test_with_large_const_lvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:61:0: style: The function 'test_with_large_lvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:35:0: style: The function 'test_with_large_rvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:52:0: style: The function 'test_with_lvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:100:0: style: The function 'test_with_non_trivial_const_lvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:72:0: style: The function 'test_with_non_trivial_lvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:45:0: style: The function 'test_with_non_trivial_rvalue' is never used. [unusedFunction]

^
build/_deps/googlebenchmark-src/test/donotoptimize_assembly_test.cc:28:0: style: The function 'test_with_rvalue' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project's include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config. [missingInclude]

